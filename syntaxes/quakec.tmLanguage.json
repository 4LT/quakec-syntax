{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "QuakeC",
  "scopeName": "source.quakec",
  "patterns": [
    {
      "include": "#anywhere"
    },
    {
      "include": "#command"
    },
    {
      "include": "#top-level-declaration"
    }
  ],
  "repository": {
    "anywhere": {
      "patterns": [
        {
          "include": "#block-comment"
        },
        {
          "include": "#line-comment"
        },
        {
          "include": "#directive"
        }
      ]
    },
    "top-level-declaration": {
      "patterns": [
        {
          "include": "#declaration"
        },
        {
          "include": "#type-declaration"
        },
        {
          "include": "#parm-list"
        },
        {
          "include": "#code-block"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "include": "#modifier"
        },
        {
          "include": "#type"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "type-declaration": {
      "patterns": [
        {
          "name": "storage.type.quakec",
          "match": "\\b(struct|class|enum|union|typedef)\\b"
        }
      ]
    },
    "parm-list": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "parm-list.open.quakec"
        }
      },
      "endCaptures": {
        "0": {
          "name": "parm-list.close.quakec"
        }
      },
      "patterns": [
        {
          "include": "#anywhere"
        },
        {
          "include": "#type"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "code-block": {
      "begin": "{",
      "end": "}",
      "patterns": [
        {
          "include": "#anywhere"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#ctl-keyword"
        },
        {
          "include": "#label"
        },
        {
          "include": "#code-block"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#anywhere"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#operator"
        }
      ]
    },
    "ctl-keyword": {
      "patterns": [
        {
          "name": "keyword.control.quakec",
          "match": "\\b(if|else|while|do|for|break|continue|goto|return|switch|case|default|prior)\\b"
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "match": "\\$(cd|origin|base|skin|frame|scale)\\b",
          "name": "keyword.other.command.quakec"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "includ": "#field"
        },
        {
          "include": "#primitive"
        }
      ]
    },
    "field": {
      "patterns": [
        {
          "match": "\\.(float|int|string|vector|entity|void)\\b",
          "name": "storage.type.quakec"
        }
      ]
    },
    "primitive": {
      "patterns": [
        {
          "match": "\\b(float|int|string|vector|entity|void|__variant)\\b",
          "name": "storage.type.quakec"
        }
      ]
    },
    "modifier": {
      "patterns": [
        {
          "name": "storage.modifier.quakec",
          "match": "\\b(local|const|static|__wrap)\\b"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.quakec",
          "match": "(>>=|<<=|&&=|\\|\\|=)"
        },
        {
          "name": "keyword.operator.quakec",
          "match": "(><|>=|<=|==|!=|&&|\\|\\|~=|&=|\\|=|\\^=|\\*=|/=|\\+=|-=|\\+\\+|--)"
        },
        {
          "name": "keyword.operator.quakec",
          "match": "(\\.|!|~|&|\\||\\^|\\*|%|/|\\+|-|>|<|=|\\?|:)"
        },
        {
          "name": "keyword.operator.new.quakec",
          "match": "\\bnew\\b"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "include": "#raw-string"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#vector-literal"
        },
        {
          "include": "#builtin-literal"
        },
        {
          "include": "#number-literal"
        }
      ]
    },
    "string-literal": {
      "name": "string.quoted.double.quakec",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.quakec",
          "match": "\\\\([\\\\\"'nrts0-9\\(=\\)<\\->]|x[0-9a-fA-F][0-9a-fA-F])"
        }
      ]
    },
    "raw-string": {
      "name": "string.quoted.double",
      "begin": "R\"(\\S*)\\(",
      "end": "\\)\\1"
    },
    "vector-literal": {
      "name": "string.quoted.single.quakec",
      "begin": "'",
      "end": "'"
    },
    "builtin-literal": {
      "name": "constant.other.builtin.quakec",
      "match": "#[0-9]+\\b"
    },
    "number-literal": {
      "patterns": [
        {
          "name": "constant.numeric.quakec",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.quakec",
          "match": "-?\\b[0-9]+\\.[0-9]+([eE]-?[0-9]+)?\\b"
        },
        {
          "match": "-?\\b[0-9]+(\\.|i)?",
          "name": "constant.numeric.quakec"
        }
      ]
    },
    "block-comment": {
      "name": "comment.block.quakec",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "line-comment": {
      "name": "comment.line.double-slash.quakec",
      "begin": "//",
      "end": "$"
    },
    "directive": {
      "patterns": [
        {
          "name": "meta.preprocessor",
          "begin": "^\\s*#\\s*(if|ifdef|ifndef|elif|endif|else|define|undef|pragma|include|append|error|message)\\b",
          "end": "([^\\\\]|^)\r?\n"
        }
      ]
    }
  }
}